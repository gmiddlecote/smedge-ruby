# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `tty-table` gem.
# Please instead update this file by running `bin/tapioca gem tty-table`.


# source://tty-table//lib/tty/table/error.rb#3
module TTY; end

# A core class intended for storing data in a structured, tabular form.
# Once the data is stored in a TTY::Table various operations can be performed
# before the information is dumped into a stdout.
#
# source://tty-table//lib/tty/table/error.rb#4
class TTY::Table
  include ::TTY::Table::Validatable
  include ::Enumerable
  include ::Comparable
  extend ::Forwardable

  # Initialize a Table
  #
  # @api private
  # @option options
  # @option options
  # @option options
  # @param options [Hash] the options to create the table with
  # @return [TTY::Table]
  #
  # source://tty-table//lib/tty/table.rb#114
  def initialize(options = T.unsafe(nil), &block); end

  # Add row to table
  #
  # @api public
  # @param row [Array]
  # @return [self]
  #
  # source://tty-table//lib/tty/table.rb#294
  def <<(row); end

  # Compare table for equivalence of header and rows attributes
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-table//lib/tty/table.rb#504
  def ==(other); end

  # Lookup element of the table given a row(i) and column(j)
  #
  # @api public
  # @example
  #   table = TTY::Table.new [["a1","a2"], ["b1","b2"]]
  #   table[0]    # => ["a1","a2"]
  #   table[0,0]  # => "a1"
  #   table[-1]   # => ["b1","b2"]
  # @param row_index [Integer]
  # @param column_index [Integer]
  #
  # source://tty-table//lib/tty/table.rb#210
  def [](row_index, column_index = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def assoc(*args, **_arg1, &block); end

  # Lookup element of the table given a row(i) and column(j)
  #
  # @api public
  # @example
  #   table = TTY::Table.new [["a1","a2"], ["b1","b2"]]
  #   table[0]    # => ["a1","a2"]
  #   table[0,0]  # => "a1"
  #   table[-1]   # => ["b1","b2"]
  # @param row_index [Integer]
  # @param column_index [Integer]
  #
  # source://tty-table//lib/tty/table.rb#210
  def at(row_index, column_index = T.unsafe(nil)); end

  # Coerce an Enumerable into a Table
  # This coercion mechanism is used by Table to handle Enumerable types
  # and force them into array type.
  #
  # @api public
  # @param rows [Enumerable] the object to coerce
  # @return [Array]
  #
  # source://tty-table//lib/tty/table.rb#477
  def coerce(rows); end

  # Return a column number at the index of the table as an Array.
  # If the table has a header then column can be searched by header name.
  # When a block is given, the elements of that Array are iterated over.
  #
  # @api public
  # @example
  #   header = [:h1, :h2]
  #   rows  = [ ["a1", "a2"], ["b1", "b2"] ]
  #   table = TTY::Table.new :rows => rows, :header => header
  #   table.column(1)
  #   table.column(1)   { |element| ... }
  #   table.column(:h1)
  #   table.column(:h1) { |element| ... }
  # @param index [Integer, String, Symbol]
  # @return [self]
  # @yield []
  #   optional block to execute in the iteration operation
  #
  # source://tty-table//lib/tty/table.rb#276
  def column(index); end

  # Return the number of columns
  #
  # @api public
  # @example
  #   table.columns_size # => 5
  # @return [Integer]
  #
  # source://tty-table//lib/tty/table.rb#349
  def columns_count; end

  # Return the number of columns
  #
  # @api public
  # @example
  #   table.columns_size # => 5
  # @return [Integer]
  #
  # source://tty-table//lib/tty/table.rb#349
  def columns_size; end

  # Lookup element of the table given a row(i) and column(j)
  #
  # @api public
  # @example
  #   table = TTY::Table.new [["a1","a2"], ["b1","b2"]]
  #   table[0]    # => ["a1","a2"]
  #   table[0,0]  # => "a1"
  #   table[-1]   # => ["b1","b2"]
  # @param row_index [Integer]
  # @param column_index [Integer]
  #
  # source://tty-table//lib/tty/table.rb#210
  def component(row_index, column_index = T.unsafe(nil)); end

  # Provides access to all table data
  #
  # @api public
  # @return [Array]
  #
  # source://tty-table//lib/tty/table.rb#141
  def data; end

  # Iterate over each tuple in the set
  #
  # @api public
  # @example
  #   table = TTY::Table.new(header, tuples)
  #   table.each { |row| ... }
  # @return [self]
  # @yield [Array[Array]]
  #
  # source://tty-table//lib/tty/table.rb#315
  def each; end

  # Same as #each but passes the index of the row with the row itself
  #
  # @api public
  # @example
  #   table = TTY::Table.new(header, tuples)
  #   table.each_with_index { |row, index|
  #   puts "#{row} at #{index}"
  #   }
  # @return self
  #
  # source://tty-table//lib/tty/table.rb#332
  def each_with_index; end

  # Lookup element of the table given a row(i) and column(j)
  #
  # @api public
  # @example
  #   table = TTY::Table.new [["a1","a2"], ["b1","b2"]]
  #   table[0]    # => ["a1","a2"]
  #   table[0,0]  # => "a1"
  #   table[-1]   # => ["b1","b2"]
  # @param row_index [Integer]
  # @param column_index [Integer]
  #
  # source://tty-table//lib/tty/table.rb#210
  def element(row_index, column_index = T.unsafe(nil)); end

  # Return true if this is an empty table, i.e. if the number of
  # rows or the number of columns is 0
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-table//lib/tty/table.rb#393
  def empty?; end

  # Compare table for equality of header and rows attributes
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-table//lib/tty/table.rb#494
  def eql?(other); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def flatten(*args, **_arg1, &block); end

  # Hash for this instance and its attributes
  #
  # @api public
  # @return [Numeric]
  #
  # source://tty-table//lib/tty/table.rb#525
  def hash; end

  # The table header
  #
  # @api public
  # @return [Enumerable]
  #
  # source://tty-table//lib/tty/table.rb#27
  def header; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def include?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def index(*args, **_arg1, &block); end

  # Inspect this instance attributes
  #
  # @api public
  # @return [String]
  #
  # source://tty-table//lib/tty/table.rb#514
  def inspect; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def length(*args, **_arg1, &block); end

  # The table orientation out of :horizontal and :vertical
  #
  # @api public
  # @return [TTY::Table::Orientation]
  #
  # source://tty-table//lib/tty/table.rb#42
  def orientation; end

  # Sets table orientation
  #
  # @api public
  # @param value [String, Symbol]
  #
  # source://tty-table//lib/tty/table.rb#150
  def orientation=(value); end

  # The table original column count
  #
  # @api public
  # @return [Integer]
  #
  # source://tty-table//lib/tty/table.rb#56
  def original_columns; end

  # The table original row count
  #
  # @api public
  # @return [Integer]
  #
  # source://tty-table//lib/tty/table.rb#49
  def original_rows; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def pretty_print(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def rassoc(*args, **_arg1, &block); end

  # Render a given table. This method takes options which will be passed
  # to the renderer prior to rendering, which allows the caller to set any
  # table rendering variables.
  #
  # @api public
  # @param renderer_type [Symbol] the renderer to be used
  # @param options [Hash]
  # @return [String]
  # @yield [renderer]
  # @yieldparam renderer [TTY::Table::Renderer] the renderer for the table
  #
  # source://tty-table//lib/tty/table.rb#435
  def render(*args, &block); end

  # Render a given table using custom border class.
  #
  # @api public
  # @param border_class [TTY::Table::Border]
  # @param renderer_type [Symbol]
  # @param options [Hash]
  # @return [String]
  # @yield [renderer]
  # @yieldparam renderer [TTY::Table::Renderer] the renderer for the table
  #
  # source://tty-table//lib/tty/table.rb#455
  def render_with(border_class, renderer_type = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # Return renderer for this table
  #
  # @param type [Symbol] the renderer type
  # @param options [Hash] the renderer options
  #
  # source://tty-table//lib/tty/table.rb#414
  def renderer(type = T.unsafe(nil), options = T.unsafe(nil)); end

  # Rotate the table between vertical and horizontal orientation
  #
  # @api private
  # @return [self]
  #
  # source://tty-table//lib/tty/table.rb#168
  def rotate; end

  # Rotate the table horizontally
  #
  # @api private
  #
  # source://tty-table//lib/tty/table.rb#187
  def rotate_horizontal; end

  # Rotate the table vertically
  #
  # @api private
  #
  # source://tty-table//lib/tty/table.rb#176
  def rotate_vertical; end

  # Marks this table as rotated
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-table//lib/tty/table.rb#159
  def rotated?; end

  # Return a row number at the index of the table as an Array.
  # When a block is given, the elements of that Array are iterated over.
  #
  # @api public
  # @example
  #   rows  = [["a1", "a2"], ["b1", "b2"]]
  #   table = TTY::Table.new rows: rows
  #   table.row(1) { |row| ... }
  # @param index [Integer]
  # @return [self]
  # @yield []
  #   optional block to execute in the iteration operation
  #
  # source://tty-table//lib/tty/table.rb#246
  def row(index, &block); end

  # The table rows
  #
  # @api private
  # @return [Enumerable]
  #
  # source://tty-table//lib/tty/table.rb#34
  def rows; end

  # Return the number of rows
  #
  # @api public
  # @example
  #   table.row_size # => 5
  # @return [Integer]
  #
  # source://tty-table//lib/tty/table.rb#362
  def rows_size; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def select(*args, **_arg1, &block); end

  # Provides a list of rows to have separations applied
  #
  # @api public
  # @return [Array]
  #
  # source://tty-table//lib/tty/table.rb#132
  def separators; end

  # Return the number of rows and columns
  #
  # @api public
  # @example
  #   table.size # => [3,5]
  # @return [Array] row x columns
  #
  # source://tty-table//lib/tty/table.rb#374
  def size; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def to_a(*args, **_arg1, &block); end

  # Convert an Array row into Header
  #
  # @api private
  # @return [TTY::Table::Header]
  #
  # source://tty-table//lib/tty/table/header.rb#15
  def to_header(row); end

  # Convert an Array row into Row
  #
  # @api private
  # @return [TTY::Table::Row]
  #
  # source://tty-table//lib/tty/table/row.rb#15
  def to_row(row, header = T.unsafe(nil)); end

  # Return string representation of table using basic renderer.
  #
  # @api public
  # @return [String]
  #
  # source://tty-table//lib/tty/table.rb#402
  def to_s; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def values_at(*args, **_arg1, &block); end

  # Check table width
  #
  # @api public
  # @return [Integer] width
  #
  # source://tty-table//lib/tty/table.rb#383
  def width; end

  private

  # Set table value at row(i) and column(j)
  #
  # @api private
  #
  # source://tty-table//lib/tty/table.rb#225
  def []=(row_index, column_index, val); end

  # Evaluate block
  #
  # @api private
  # @return [Table]
  #
  # source://tty-table//lib/tty/table.rb#536
  def yield_or_eval(&block); end

  class << self
    # Create a new Table where each argument is a row
    #
    # @api public
    # @example
    #   table = TTY::Table[["a1", "a2"], ["b1", "b2"]]
    #
    # source://tty-table//lib/tty/table.rb#68
    def [](*rows); end

    # Instantiate a new Table
    #
    # @api public
    # @example of no header
    #   table = Table.new [["a1", "a2"], ["b1", "b2"]]
    # @example of direct parameters
    #   rows  = [["a1", "a2"], ["b1", "b2"]]
    #   table = Table.new ["Header 1", "Header 2"], rows
    # @example of parameters passed as options
    #   rows  = [["a1", "a2"], ["b1", "b2"]]
    #   table = Table.new header: ["Header 1", "Header 2"], rows: rows
    # @example of parameters passed as hash
    #   Table.new [{"Header1" => ["a1","a2"], "Header2" => ["b1", "b2"] }]}
    # @param args [Array[Symbol], Hash]
    #
    # source://tty-table//lib/tty/table.rb#91
    def new(*args, &block); end
  end
end

# A class responsible for column alignments
#
# Used internally by {TTY::Table::Operation::Alignment}
#
# source://tty-table//lib/tty/table/alignment_set.rb#8
class TTY::Table::AlignmentSet
  include ::Enumerable

  # Initialize an AlignmentSet
  #
  # @api private
  # @param alignments [AlignmentSet, Array] the alignments for the renderer
  # @return [AlignmentSet] a new instance of AlignmentSet
  #
  # source://tty-table//lib/tty/table/alignment_set.rb#19
  def initialize(alignments); end

  # Lookup an alignment by index
  #
  # @api public
  # @param index [Integer]
  # @return [Symbol] alignment
  #
  # source://tty-table//lib/tty/table/alignment_set.rb#45
  def [](index); end

  # Iterate over each element in the alignment set
  #
  # @api public
  # @example
  #   alignment = AlignmentSet.new [1,2,3]
  #   alignment.each { |element| ... }
  # @return [self]
  #
  # source://tty-table//lib/tty/table/alignment_set.rb#32
  def each; end

  # Convert to array
  #
  # @api public
  # @return [Array]
  #
  # source://tty-table//lib/tty/table/alignment_set.rb#54
  def to_ary; end

  # String representation of aligments
  #
  # @api public
  # @return [String]
  #
  # source://tty-table//lib/tty/table/alignment_set.rb#63
  def to_s; end

  protected

  # Returns the value of attribute alignments.
  #
  # source://tty-table//lib/tty/table/alignment_set.rb#69
  def alignments; end
end

# source://tty-table//lib/tty/table/alignment_set.rb#11
TTY::Table::AlignmentSet::DEFAULT = T.let(T.unsafe(nil), Symbol)

# Raised when the required argument is not supplied
#
# source://tty-table//lib/tty/table/error.rb#31
class TTY::Table::ArgumentRequired < ::ArgumentError; end

# Abstract base class that is responsible for building the table border.
#
# source://tty-table//lib/tty/table/border/row_line.rb#5
class TTY::Table::Border
  # Instantiate a new object
  #
  # @api private
  # @param column_widths [Array] the table column widths
  # @param border_opts [BorderOptions]
  # @return [Object]
  #
  # source://tty-table//lib/tty/table/border.rb#56
  def initialize(column_widths, border_opts = T.unsafe(nil)); end

  # Retrive individual character by type
  #
  # @api private
  # @param type [String] the character type
  # @return [String]
  #
  # source://tty-table//lib/tty/table/border.rb#75
  def [](type); end

  # A line spannig all columns marking bottom of a table.
  #
  # @api private
  # @return [String]
  #
  # source://tty-table//lib/tty/table/border.rb#102
  def bottom_line; end

  # Check if border color is set
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-table//lib/tty/table/border.rb#84
  def color?; end

  # A line spanning all columns delemeting rows in a table.
  #
  # @api private
  # @return [String]
  #
  # source://tty-table//lib/tty/table/border.rb#111
  def middle_line; end

  # A line spanning all columns delemeting fields in a row.
  #
  # @api public
  # @param row [TTY::Table::Row] the table row
  # @return [String]
  #
  # source://tty-table//lib/tty/table/border.rb#123
  def row_line(row); end

  # Set color for a string
  #
  # @api public
  # @param color [Symbol]
  # @param string [String] the string to color
  # @return [String]
  #
  # source://tty-table//lib/tty/table/border.rb#141
  def set_color(color, string); end

  # A line spanning all columns marking top of a table.
  #
  # @api private
  # @return [String]
  #
  # source://tty-table//lib/tty/table/border.rb#93
  def top_line; end

  protected

  # The table custom border options including styling
  #
  # @api private
  #
  # source://tty-table//lib/tty/table/border.rb#157
  def border_options; end

  # Generate particular border type
  #
  # @api private
  # @param type [String] border type one of :top, :bottom and :mid
  # @return [String]
  #
  # source://tty-table//lib/tty/table/border.rb#208
  def render(type); end

  # Generate a border string
  #
  # @api private
  # @param line [String] the line character
  # @return [String]
  #
  # source://tty-table//lib/tty/table/border.rb#229
  def render_line(line, left, right, intersection); end

  # Generate border for a given multiline row
  #
  # @api private
  # @param row [TTY::Table::Row] the table row
  # @param line_index [Integer] the index for current line inside multiline
  # @param line [TTY::Table::Border::RowLine]
  # @return [String]
  #
  # source://tty-table//lib/tty/table/border.rb#192
  def row_height_line(row, line_index, line); end

  # Separate multiline string into individual rows with border.
  #
  # @api private
  # @param row [TTY::Table::Row] the table row
  # @param line [TTY::Table::Border::RowLine]
  #
  # source://tty-table//lib/tty/table/border.rb#169
  def row_heights(row, line); end

  # The row field widths
  #
  # @api private
  #
  # source://tty-table//lib/tty/table/border.rb#152
  def widths; end

  class << self
    # Store characters for border
    #
    # @api private
    #
    # source://tty-table//lib/tty/table/border.rb#28
    def characters; end

    # Store characters for border
    #
    # @api private
    #
    # source://tty-table//lib/tty/table/border.rb#28
    def characters=(_arg0); end

    # Define border characters
    #
    # @api public
    # @param characters [Hash] the border characters
    # @return [Hash]
    #
    # source://tty-table//lib/tty/table/border.rb#39
    def def_border(characters = T.unsafe(nil), &block); end
  end
end

# A class that represents an ascii border.
#
# @api private
#
# source://tty-table//lib/tty/table/border/ascii.rb#11
class TTY::Table::Border::ASCII < ::TTY::Table::Border; end

# Represent a separtor on each row
#
# source://tty-table//lib/tty/table/border.rb#19
TTY::Table::Border::EACH_ROW = T.let(T.unsafe(nil), Symbol)

# source://tty-table//lib/tty/table/border.rb#14
TTY::Table::Border::EMPTY_CHAR = T.let(T.unsafe(nil), String)

# A class that represents no border.
#
# source://tty-table//lib/tty/table/border/null.rb#9
class TTY::Table::Border::Null < ::TTY::Table::Border
  # A stub middle line
  #
  # @api private
  #
  # source://tty-table//lib/tty/table/border/null.rb#31
  def middle_line; end
end

# A class for a table row line chars manipulation
#
# source://tty-table//lib/tty/table/border/row_line.rb#7
class TTY::Table::Border::RowLine < ::Struct
  # Colorize characters with a given style
  #
  # @api public
  #
  # source://tty-table//lib/tty/table/border/row_line.rb#11
  def colorize(border, style); end
end

# specify a separator as a row
#
# source://tty-table//lib/tty/table/border.rb#22
TTY::Table::Border::SEPARATOR = T.let(T.unsafe(nil), Symbol)

# source://tty-table//lib/tty/table/border.rb#16
TTY::Table::Border::SPACE_CHAR = T.let(T.unsafe(nil), String)

# A class that represents a unicode border.
#
# @api private
#
# source://tty-table//lib/tty/table/border/unicode.rb#11
class TTY::Table::Border::Unicode < ::TTY::Table::Border; end

# A class responsible for bulding and modifying border
#
# Used internally by {Table::Border} to allow for building custom border
# through DSL
#
# @api private
#
# source://tty-table//lib/tty/table/border_dsl.rb#14
class TTY::Table::BorderDSL
  extend ::Forwardable

  # Initialize a BorderDSL
  #
  # @api private
  # @param characters [Hash] the border characters
  # @return [undefined]
  #
  # source://tty-table//lib/tty/table/border_dsl.rb#32
  def initialize(border_opts = T.unsafe(nil), &block); end

  # Set bottom border character
  #
  # @api public
  # @param value [String] the character value
  # @return [undefined]
  #
  # source://tty-table//lib/tty/table/border_dsl.rb#121
  def bottom(value); end

  # Set bottom left corner border character
  #
  # @api public
  # @param value [String] the character value
  # @return [undefined]
  #
  # source://tty-table//lib/tty/table/border_dsl.rb#145
  def bottom_left(value); end

  # Set bottom middle border character
  #
  # @api public
  # @param value [String] the character value
  # @return [undefined]
  #
  # source://tty-table//lib/tty/table/border_dsl.rb#133
  def bottom_mid(value); end

  # Set bottom right corner border character
  #
  # @api public
  # @param value [String] the character value
  # @return [undefined]
  #
  # source://tty-table//lib/tty/table/border_dsl.rb#157
  def bottom_right(value); end

  # Set center border character
  #
  # @api public
  # @param value [String] the character value
  # @return [undefined]
  #
  # source://tty-table//lib/tty/table/border_dsl.rb#229
  def center(value); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def characters(*args, **_arg1, &block); end

  # Set left border character
  #
  # @api public
  # @param value [String] the character value
  # @return [undefined]
  #
  # source://tty-table//lib/tty/table/border_dsl.rb#217
  def left(value); end

  # Set middle border character
  #
  # @api public
  # @param value [String] the character value
  # @return [undefined]
  #
  # source://tty-table//lib/tty/table/border_dsl.rb#169
  def mid(value); end

  # Set middle left corner border character
  #
  # @api public
  # @param value [String] the character value
  # @return [undefined]
  #
  # source://tty-table//lib/tty/table/border_dsl.rb#193
  def mid_left(value); end

  # Set middle border character
  #
  # @api public
  # @param value [String] the character value
  # @return [undefined]
  #
  # source://tty-table//lib/tty/table/border_dsl.rb#181
  def mid_mid(value); end

  # Set middle right corner border character
  #
  # @api public
  # @param value [String] the character value
  # @return [undefined]
  #
  # source://tty-table//lib/tty/table/border_dsl.rb#205
  def mid_right(value); end

  # Border options
  #
  # @api private
  # @return [Table::BorderOptions]
  #
  # source://tty-table//lib/tty/table/border_dsl.rb#20
  def options; end

  # Set right border character
  #
  # @api public
  # @param value [String] the character value
  # @return [undefined]
  #
  # source://tty-table//lib/tty/table/border_dsl.rb#241
  def right(value); end

  # Apply table tuple separator
  #
  # @api public
  # @param value [Symbol] the table tuple separator
  # @return [undefined]
  #
  # source://tty-table//lib/tty/table/border_dsl.rb#59
  def separator(value = T.unsafe(nil)); end

  # Apply style color to the border
  #
  # @api public
  # @param value [Symbol] the style color for the border
  # @return [undefined]
  #
  # source://tty-table//lib/tty/table/border_dsl.rb#45
  def style(value = T.unsafe(nil)); end

  # Set top border character
  #
  # @api public
  # @param value [String] the character value
  # @return [undefined]
  #
  # source://tty-table//lib/tty/table/border_dsl.rb#73
  def top(value); end

  # Set top left corner border character
  #
  # @api public
  # @param value [String] the character value
  # @return [undefined]
  #
  # source://tty-table//lib/tty/table/border_dsl.rb#97
  def top_left(value); end

  # Set top middle border character
  #
  # @api public
  # @param value [String] the character value
  # @return [undefined]
  #
  # source://tty-table//lib/tty/table/border_dsl.rb#85
  def top_mid(value); end

  # Set top right corner border character
  #
  # @api public
  # @param value [String] the character value
  # @return [undefined]
  #
  # source://tty-table//lib/tty/table/border_dsl.rb#109
  def top_right(value); end

  private

  # Evaluate block
  #
  # @api private
  # @return [Table]
  #
  # source://tty-table//lib/tty/table/border_dsl.rb#252
  def yield_or_eval(&block); end
end

# A class that represents table border options
#
# Used internally by {Table::Border} to manage options such as style
#
# @api private
#
# source://tty-table//lib/tty/table/border_options.rb#10
class TTY::Table::BorderOptions
  # Initialize a BorderOptions
  #
  # @api public
  # @param style [String] the style like :red
  # @param separator [String] the separator character
  # @param characters [Hash] the border characters
  # @return [BorderOptions] a new instance of BorderOptions
  #
  # source://tty-table//lib/tty/table/border_options.rb#42
  def initialize(characters: T.unsafe(nil), separator: T.unsafe(nil), style: T.unsafe(nil)); end

  # @api private
  #
  # source://tty-table//lib/tty/table/border_options.rb#26
  def characters; end

  # @api private
  #
  # source://tty-table//lib/tty/table/border_options.rb#26
  def characters=(_arg0); end

  # @api private
  #
  # source://tty-table//lib/tty/table/border_options.rb#28
  def separator; end

  # @api private
  #
  # source://tty-table//lib/tty/table/border_options.rb#28
  def separator=(_arg0); end

  # Check if there should be a separator AFTER this line
  #
  # @api public
  # @param line [Integer]
  # @return [Boolean]
  #
  # source://tty-table//lib/tty/table/border_options.rb#64
  def separator?(line); end

  # @api private
  #
  # source://tty-table//lib/tty/table/border_options.rb#30
  def style; end

  # @api private
  #
  # source://tty-table//lib/tty/table/border_options.rb#30
  def style=(_arg0); end

  # Convert to hash
  #
  # @api public
  # @return [Hash]
  #
  # source://tty-table//lib/tty/table/border_options.rb#53
  def to_hash; end

  class << self
    # Create options instance from hash
    #
    # @api public
    #
    # source://tty-table//lib/tty/table/border_options.rb#14
    def from(options); end
  end
end

# A class responsible for enforcing column constraints.
#
# Used internally by {Renderer::Basic} to enforce correct column widths.
#
# @api private
#
# source://tty-table//lib/tty/table/column_constraint.rb#14
class TTY::Table::ColumnConstraint
  # Initialize a Columns
  #
  # @api public
  # @param table [TTY::Table]
  # @param renderer [TTY::Table::Renderer]
  # @return [ColumnConstraint] a new instance of ColumnConstraint
  #
  # source://tty-table//lib/tty/table/column_constraint.rb#30
  def initialize(table, renderer); end

  # Total border size
  #
  # @api public
  # @return [Integer]
  #
  # source://tty-table//lib/tty/table/column_constraint.rb#49
  def border_size; end

  # Return the constrained column widths.
  #
  # Account for table field widths and any user defined
  # constraints on the table width.
  #
  # @api public
  #
  # source://tty-table//lib/tty/table/column_constraint.rb#87
  def enforce; end

  # Estimate minimum table width to be able to display content
  #
  # @api public
  # @return [Integer]
  #
  # source://tty-table//lib/tty/table/column_constraint.rb#68
  def minimum_width; end

  # Return column's natural unconstrained widths
  #
  # @api public
  # @return [Integer]
  #
  # source://tty-table//lib/tty/table/column_constraint.rb#77
  def natural_width; end

  # Estimate outside border size
  #
  # @api public
  # @return [Integer]
  #
  # source://tty-table//lib/tty/table/column_constraint.rb#40
  def outside_border_size; end

  # Measure total padding size for a table
  #
  # @api public
  # @return [Integer]
  #
  # source://tty-table//lib/tty/table/column_constraint.rb#58
  def padding_size; end

  # @api private
  #
  # source://tty-table//lib/tty/table/column_constraint.rb#21
  def renderer; end

  # @api private
  #
  # source://tty-table//lib/tty/table/column_constraint.rb#19
  def table; end

  private

  # Assert minimum width for the table content
  #
  # @api private
  # @raise [TTY::ResizeError]
  #
  # source://tty-table//lib/tty/table/column_constraint.rb#157
  def assert_minimum_width; end

  # Distribute remaining width to meet the total width requirement.
  #
  # @api private
  # @param widths [Array[Integer]]
  #
  # source://tty-table//lib/tty/table/column_constraint.rb#169
  def distribute_extra_width(widths); end

  # Expand column widths to match the requested width
  #
  # @api private
  #
  # source://tty-table//lib/tty/table/column_constraint.rb#124
  def expand_column_widths; end

  # Rotate table to vertical orientation and print information to stdout
  #
  # @api private
  #
  # source://tty-table//lib/tty/table/column_constraint.rb#113
  def rotate; end

  # Shrink column widths to match the requested width
  #
  # @api private
  #
  # source://tty-table//lib/tty/table/column_constraint.rb#138
  def shrink; end
end

# @api private
#
# source://tty-table//lib/tty/table/column_constraint.rb#17
TTY::Table::ColumnConstraint::BORDER_WIDTH = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://tty-table//lib/tty/table/column_constraint.rb#15
TTY::Table::ColumnConstraint::MIN_WIDTH = T.let(T.unsafe(nil), Integer)

# A module for calculating table data column widths
#
# Used by {Table} to manage column sizing.
#
# @api private
#
# source://tty-table//lib/tty/table/columns.rb#12
module TTY::Table::Columns
  private

  # Assert data integrity for column widths
  #
  # @api public
  # @param column_widths [Array]
  # @param table_widths [Integer]
  # @raise [TTY::InvalidArgument]
  #
  # source://tty-table//lib/tty/table/columns.rb#86
  def assert_widths(column_widths, table_widths); end

  # Calcualte maximum column widths
  #
  # @api private
  # @return [Array] column widths
  #
  # source://tty-table//lib/tty/table/columns.rb#28
  def extract_widths(data); end

  # Find a maximum column width. The calculation takes into account
  # wether the content is escaped or not.
  #
  # @api private
  # @param index [Integer] the column index
  # @return [Integer]
  #
  # source://tty-table//lib/tty/table/columns.rb#46
  def find_maximum(data, index); end

  # Calculate total table width
  #
  # @api public
  # @return [Integer]
  #
  # source://tty-table//lib/tty/table/columns.rb#18
  def total_width(data); end

  # Converts column widths to array format or infers default widths
  #
  # @api public
  # @param table [TTY::Table]
  # @param column_widths [Array, Numeric, NilClass]
  # @return [Array[Integer]]
  #
  # source://tty-table//lib/tty/table/columns.rb#62
  def widths_from(table, column_widths = T.unsafe(nil)); end

  class << self
    # Assert data integrity for column widths
    #
    # @api public
    # @param column_widths [Array]
    # @param table_widths [Integer]
    # @raise [TTY::InvalidArgument]
    #
    # source://tty-table//lib/tty/table/columns.rb#86
    def assert_widths(column_widths, table_widths); end

    # Calcualte maximum column widths
    #
    # @api private
    # @return [Array] column widths
    #
    # source://tty-table//lib/tty/table/columns.rb#28
    def extract_widths(data); end

    # Find a maximum column width. The calculation takes into account
    # wether the content is escaped or not.
    #
    # @api private
    # @param index [Integer] the column index
    # @return [Integer]
    #
    # source://tty-table//lib/tty/table/columns.rb#46
    def find_maximum(data, index); end

    # Calculate total table width
    #
    # @api public
    # @return [Integer]
    #
    # source://tty-table//lib/tty/table/columns.rb#18
    def total_width(data); end

    # Converts column widths to array format or infers default widths
    #
    # @api public
    # @param table [TTY::Table]
    # @param column_widths [Array, Numeric, NilClass]
    # @return [Array[Integer]]
    #
    # source://tty-table//lib/tty/table/columns.rb#62
    def widths_from(table, column_widths = T.unsafe(nil)); end
  end
end

# Raised when inserting into table with a mismatching row(s)
#
# source://tty-table//lib/tty/table/error.rb#6
class TTY::Table::DimensionMismatchError < ::ArgumentError; end

# A class that represents a unique element in a table.
#
# Used internally by {Table::Header} and {Table::Row} to
# define internal structure.
#
# @api private
#
# source://tty-table//lib/tty/table/field.rb#13
class TTY::Table::Field
  # Initialize a Field
  #
  # @api private
  # @example
  #   field = TTY::Table::Field.new "a1"
  #   field.value  # => a1
  # @example
  #   field = TTY::Table::Field.new value: "a1"
  #   field.value  # => a1
  # @example
  #   field = TTY::Table::Field.new value: "a1", alignment: :center
  #   field.value     # => a1
  #   field.alignment # => :center
  # @return [Field] a new instance of Field
  #
  # source://tty-table//lib/tty/table/field.rb#55
  def initialize(value); end

  # Compare fields for equivalence of value attribute
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-table//lib/tty/table/field.rb#151
  def ==(other); end

  # The field alignment
  #
  # @api public
  #
  # source://tty-table//lib/tty/table/field.rb#37
  def alignment; end

  # @api private
  #
  # source://tty-table//lib/tty/table/field.rb#124
  def chars; end

  # Number of columns this field spans. Defaults to 1.
  #
  # @api public
  #
  # source://tty-table//lib/tty/table/field.rb#27
  def colspan; end

  # The formatted value inside the field used for display
  #
  # @api public
  #
  # source://tty-table//lib/tty/table/field.rb#22
  def content; end

  # The formatted value inside the field used for display
  #
  # @api public
  #
  # source://tty-table//lib/tty/table/field.rb#22
  def content=(_arg0); end

  # Compare fields for equality of value attribute
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-table//lib/tty/table/field.rb#142
  def eql?(other); end

  # Extract options and set value
  #
  # @api private
  #
  # source://tty-table//lib/tty/table/field.rb#67
  def extract_options(value); end

  # Hash for this instance and its attributes
  #
  # @api public
  # @return [Numeric]
  #
  # source://tty-table//lib/tty/table/field.rb#170
  def hash; end

  # Extract the number of lines this value spans
  #
  # @api public
  # @return [Integer]
  #
  # source://tty-table//lib/tty/table/field.rb#120
  def height; end

  # Inspect this instance attributes
  #
  # @api public
  # @return [String]
  #
  # source://tty-table//lib/tty/table/field.rb#160
  def inspect; end

  # If the string contains unescaped new lines then the longest token
  # deterimines the actual field length.
  #
  # @api public
  # @return [Integer]
  #
  # source://tty-table//lib/tty/table/field.rb#109
  def length; end

  # Return number of lines this value spans.
  #
  # A distinction is being made between escaped and non-escaped strings.
  #
  # @api public
  # @return [Array[String]]
  #
  # source://tty-table//lib/tty/table/field.rb#98
  def lines; end

  # Reset to original value
  #
  # @api public
  #
  # source://tty-table//lib/tty/table/field.rb#80
  def reset!; end

  # Number of rows this field spans. Defaults to 1.
  #
  # @api public
  #
  # source://tty-table//lib/tty/table/field.rb#32
  def rowspan; end

  # Return field content
  #
  # @api public
  # @return [String]
  #
  # source://tty-table//lib/tty/table/field.rb#133
  def to_s; end

  # The value inside the field
  #
  # @api public
  #
  # source://tty-table//lib/tty/table/field.rb#17
  def value; end

  # The value inside the field
  #
  # @api public
  #
  # source://tty-table//lib/tty/table/field.rb#17
  def value=(_arg0); end

  # The content width
  #
  # @api public
  #
  # source://tty-table//lib/tty/table/field.rb#87
  def width; end
end

# A set of header elements that correspond to values in each row
#
# source://tty-table//lib/tty/table/header.rb#20
class TTY::Table::Header
  include ::Enumerable
  extend ::Forwardable

  # Initialize a Header
  #
  # @api public
  # @return [undefined]
  #
  # source://tty-table//lib/tty/table/header.rb#39
  def initialize(attributes = T.unsafe(nil)); end

  # Check if this header is equivalent to another header
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-table//lib/tty/table/header.rb#155
  def ==(other); end

  # Lookup a column in the header given a name
  #
  # @api public
  # @param attribute [Integer, String] the attribute to look up by
  #
  # source://tty-table//lib/tty/table/header.rb#75
  def [](attribute); end

  # Set value at index
  #
  # @api public
  # @example
  #   header[attribute] = value
  #
  # source://tty-table//lib/tty/table/header.rb#100
  def []=(attribute, value); end

  # The header attributes
  #
  # @api private
  # @return [Array]
  #
  # source://tty-table//lib/tty/table/header.rb#31
  def attributes; end

  # Lookup attribute without evaluation
  #
  # @api public
  #
  # source://tty-table//lib/tty/table/header.rb#90
  def call(attribute); end

  # Iterate over each element in the vector
  #
  # @api public
  # @example
  #   header = TTY::Table::Header.new [1,2,3]
  #   header.each { |element| ... }
  # @return [self]
  #
  # source://tty-table//lib/tty/table/header.rb#53
  def each; end

  # Check if there are no elements.
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-table//lib/tty/table/header.rb#146
  def empty?; end

  # Check if this header is equivalent to another header
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-table//lib/tty/table/header.rb#155
  def eql?(other); end

  # The header attributes
  #
  # @api private
  # @return [Array]
  #
  # source://tty-table//lib/tty/table/header.rb#31
  def fields; end

  # Find maximum header height
  #
  # @api public
  # @return [Integer]
  #
  # source://tty-table//lib/tty/table/header.rb#119
  def height; end

  # source://tty-table//lib/tty/table/header.rb#167
  def inspect; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def join(*args, **_arg1, &block); end

  # Size of the header
  #
  # @api public
  # @return [Integer]
  #
  # source://tty-table//lib/tty/table/header.rb#109
  def length; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def map(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def map!(*args, **_arg1, &block); end

  # Size of the header
  #
  # @api public
  # @return [Integer]
  #
  # source://tty-table//lib/tty/table/header.rb#109
  def size; end

  # Return the header elements in an array.
  #
  # @api public
  # @return [Array]
  #
  # source://tty-table//lib/tty/table/header.rb#137
  def to_a; end

  # Convert the Header into an Array
  #
  # @api public
  # @return [Array]
  #
  # source://tty-table//lib/tty/table/header.rb#128
  def to_ary; end

  # Instantiates a new field
  #
  # @api public
  # @param attribute [String, Hash] the attribute value to convert to field object
  #
  # source://tty-table//lib/tty/table/header.rb#65
  def to_field(attribute = T.unsafe(nil)); end

  # Provide an unique hash value
  #
  # @api public
  #
  # source://tty-table//lib/tty/table/header.rb#163
  def to_hash; end
end

# A module responsible for indenting table representation
#
# source://tty-table//lib/tty/table/indentation.rb#6
module TTY::Table::Indentation
  private

  # Return a table part with indentation inserted
  #
  # @api public
  # @param part [#map, #to_s] the rendered table part
  #
  # source://tty-table//lib/tty/table/indentation.rb#13
  def indent(part, indentation); end

  # Insert indentation into a table renderd line
  #
  # @api public
  # @param line [String] the rendered table line
  # @param indentation [Integer] the amount of indentation to apply
  # @return [String]
  #
  # source://tty-table//lib/tty/table/indentation.rb#32
  def insert_indentation(line, indentation); end

  class << self
    # Return a table part with indentation inserted
    #
    # @api public
    # @param part [#map, #to_s] the rendered table part
    #
    # source://tty-table//lib/tty/table/indentation.rb#13
    def indent(part, indentation); end

    # Insert indentation into a table renderd line
    #
    # @api public
    # @param line [String] the rendered table line
    # @param indentation [Integer] the amount of indentation to apply
    # @return [String]
    #
    # source://tty-table//lib/tty/table/indentation.rb#32
    def insert_indentation(line, indentation); end
  end
end

# Raised when the argument is not expected
#
# source://tty-table//lib/tty/table/error.rb#34
class TTY::Table::InvalidArgument < ::ArgumentError; end

# Raised when the table orientation is unkown
#
# source://tty-table//lib/tty/table/error.rb#19
class TTY::Table::InvalidOrientationError < ::ArgumentError; end

# Raised when the operation is not implemented
#
# source://tty-table//lib/tty/table/error.rb#25
class TTY::Table::NoImplementationError < ::NotImplementedError; end

# source://tty-table//lib/tty/table/operation/alignment.rb#7
module TTY::Table::Operation; end

# A class which responsiblity is to align table rows and header.
#
# source://tty-table//lib/tty/table/operation/alignment.rb#9
class TTY::Table::Operation::Alignment
  # Initialize an Alignment operation
  #
  # @api private
  # @return [Alignment] a new instance of Alignment
  #
  # source://tty-table//lib/tty/table/operation/alignment.rb#15
  def initialize(alignments, widths = T.unsafe(nil)); end

  # Evaluate alignment of the provided row
  #
  # @api public
  # @param field [TTY::Table::Field] the table field
  # @param row [Array] the table row
  # @param col [Integer] the table column index
  # @return [TTY::Table::Field]
  #
  # source://tty-table//lib/tty/table/operation/alignment.rb#34
  def call(field, row, col); end

  protected

  # Align each field in a row
  #
  # @api private
  # @param field [TTY::Table::Field] the table field
  # @param col [Integer] the table column index
  # @return [TTY::Table::Field]
  #
  # source://tty-table//lib/tty/table/operation/alignment.rb#55
  def align_field(field, col); end

  # Returns the value of attribute alignments.
  #
  # source://tty-table//lib/tty/table/operation/alignment.rb#40
  def alignments; end

  # Returns the value of attribute widths.
  #
  # source://tty-table//lib/tty/table/operation/alignment.rb#42
  def widths; end
end

# source://tty-table//lib/tty/table/operation/alignment.rb#10
TTY::Table::Operation::Alignment::DEFAULT = T.let(T.unsafe(nil), Symbol)

# A class responsible for escaping special chars in a table field
#
# @api private
#
# source://tty-table//lib/tty/table/operation/escape.rb#9
class TTY::Table::Operation::Escape
  # Escape special characters in a table field
  #
  # @api public
  # @param field [TTY::Table::Field]
  # @param row [Integer] the field row index
  # @param col [Integer] the field column index
  #
  # source://tty-table//lib/tty/table/operation/escape.rb#21
  def call(field, row, col); end
end

# A class responsible for transforming table field
#
# @api private
#
# source://tty-table//lib/tty/table/operation/filter.rb#9
class TTY::Table::Operation::Filter
  # Initialize a Filter
  #
  # @api public
  # @return [Filter] a new instance of Filter
  #
  # source://tty-table//lib/tty/table/operation/filter.rb#13
  def initialize(filter); end

  # Apply filer to the provided table field
  #
  # @api public
  # @param field [TTY::Table::Field]
  # @param row [Integer] the field row index
  # @param col [Integer] the field column index
  #
  # source://tty-table//lib/tty/table/operation/filter.rb#28
  def call(field, row, col); end
end

# A class responsible for padding field with whitespace
#
# Used internally by {Table::Renderer}
#
# source://tty-table//lib/tty/table/operation/padding.rb#11
class TTY::Table::Operation::Padding
  # Initialize a Padding operation
  #
  # @api public
  # @param padding [Strings::Padder]
  # @return [Padding] a new instance of Padding
  #
  # source://tty-table//lib/tty/table/operation/padding.rb#17
  def initialize(padding); end

  # Apply padding to a field
  #
  # @api public
  # @param field [TTY::Table::Field] the table field
  # @return [TTY::Table::Field]
  #
  # source://tty-table//lib/tty/table/operation/padding.rb#29
  def call(field, *_arg1); end

  protected

  # Returns the value of attribute padding.
  #
  # source://tty-table//lib/tty/table/operation/padding.rb#35
  def padding; end
end

# A class responsible for shortening text.
#
# @api private
#
# source://tty-table//lib/tty/table/operation/truncation.rb#11
class TTY::Table::Operation::Truncation
  # Initialize a Truncation
  #
  # @api public
  # @return [Truncation] a new instance of Truncation
  #
  # source://tty-table//lib/tty/table/operation/truncation.rb#18
  def initialize(widths); end

  # Apply truncation to a field
  #
  # @api public
  # @param field [TTY::Table::Field] the table field
  # @param row [Integer] the field row index
  # @param col [Integer] the field column index
  # @return [TTY::Table::Field]
  #
  # source://tty-table//lib/tty/table/operation/truncation.rb#36
  def call(field, row, col); end

  # @api private
  #
  # source://tty-table//lib/tty/table/operation/truncation.rb#13
  def widths; end
end

# A class responsible for wrapping text.
#
# @api private
#
# source://tty-table//lib/tty/table/operation/wrapped.rb#11
class TTY::Table::Operation::Wrapped
  # Initialize a Wrapped
  #
  # @api public
  # @return [Wrapped] a new instance of Wrapped
  #
  # source://tty-table//lib/tty/table/operation/wrapped.rb#17
  def initialize(widths); end

  # Apply wrapping to a field
  #
  # @api public
  # @param field [TTY::Table::Field] the table field
  # @param row [Integer] the field row index
  # @param col [Integer] the field column index
  # @return [Array[String]]
  #
  # source://tty-table//lib/tty/table/operation/wrapped.rb#35
  def call(field, row, col); end

  # @api private
  #
  # source://tty-table//lib/tty/table/operation/wrapped.rb#12
  def widths; end
end

# A class holding table field operations.
#
# @api private
#
# source://tty-table//lib/tty/table/operations.rb#8
class TTY::Table::Operations
  # Initialize Operations
  #
  # @api public
  # @return [Operations] a new instance of Operations
  #
  # source://tty-table//lib/tty/table/operations.rb#12
  def initialize; end

  # Lookup operation
  #
  # @api public
  # @param operation [Symbol]
  # @return [Object] the operation
  #
  # source://tty-table//lib/tty/table/operations.rb#38
  def [](operation); end

  # Add operation
  #
  # @api public
  # @param operation_type [Symbol] the operation type
  # @param object [Object] the callable object
  # @return [Hash]
  #
  # source://tty-table//lib/tty/table/operations.rb#26
  def add(operation_type, object); end

  # Apply operations to a table data
  #
  # @api public
  # @param types [Array[Symbol]] the operation types
  # @param options [Hash] the options for the row
  # @return [TTY::Table]
  #
  # source://tty-table//lib/tty/table/operations.rb#52
  def apply_to(table, *args); end

  protected

  # Available operations
  #
  # @api public
  # @return [Hash]
  #
  # source://tty-table//lib/tty/table/operations.rb#73
  def operations; end
end

# A class representing table orientation
#
# @api private
#
# source://tty-table//lib/tty/table/orientation/horizontal.rb#6
class TTY::Table::Orientation
  # Initialize an Orientation
  #
  # @api public
  # @return [Orientation] a new instance of Orientation
  #
  # source://tty-table//lib/tty/table/orientation.rb#20
  def initialize(name); end

  # Check if orientation is horizontal
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-table//lib/tty/table/orientation.rb#55
  def horizontal?; end

  # The name for the orientation
  #
  # @api public
  #
  # source://tty-table//lib/tty/table/orientation.rb#15
  def name; end

  # Check if orientation is vertical
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-table//lib/tty/table/orientation.rb#46
  def vertical?; end

  class << self
    # Coerce the name argument into an orientation
    #
    # @api public
    # @param name [Symbol]
    #
    # source://tty-table//lib/tty/table/orientation.rb#29
    def coerce(name); end
  end
end

# A class responsible for horizontal table transformation
#
# source://tty-table//lib/tty/table/orientation/horizontal.rb#8
class TTY::Table::Orientation::Horizontal < ::TTY::Table::Orientation
  # Slice vertical table data into horizontal
  #
  # @api public
  # @param table [Table]
  #
  # source://tty-table//lib/tty/table/orientation/horizontal.rb#25
  def slice(table); end

  # Rotate table horizontally
  #
  # @api public
  # @param table [Table]
  # @return [nil]
  #
  # source://tty-table//lib/tty/table/orientation/horizontal.rb#16
  def transform(table); end
end

# A class responsible for vertical table transformation
#
# source://tty-table//lib/tty/table/orientation/vertical.rb#8
class TTY::Table::Orientation::Vertical < ::TTY::Table::Orientation
  # Slice horizontal table data into vertical
  #
  # @api public
  # @param table [Table]
  #
  # source://tty-table//lib/tty/table/orientation/vertical.rb#25
  def slice(table); end

  # Rotate table vertically
  #
  # @api public
  # @param table [Table]
  # @return [nil]
  #
  # source://tty-table//lib/tty/table/orientation/vertical.rb#16
  def transform(table); end
end

# A module responsible for selecting tabule data renderer
#
# Used internally by {Table} to render table content out.
#
# @api private
#
# source://tty-table//lib/tty/table/renderer/basic.rb#24
module TTY::Table::Renderer
  private

  # Raises an error if provided border class is of wrong type or has invalid
  # implementation
  #
  # @api public
  # @raise [TypeError] raised when providing wrong class for border
  # @raise [NoImplementationError] raised when border class does not implement core methods
  #
  # source://tty-table//lib/tty/table/renderer.rb#48
  def assert_border_class(border_class); end

  # Render a given table and return the string representation.
  #
  # @api public
  # @option options
  # @param table [TTY::Table] the table to be rendered
  # @param options [Hash] the options to render the table with
  # @return [String]
  # @yield [renderer]
  #
  # source://tty-table//lib/tty/table/renderer.rb#74
  def render(table, options = T.unsafe(nil), &block); end

  # Add custom border for the renderer
  #
  # @api public
  # @param border_class [TTY::Table::Border]
  # @param table [TTY::Table]
  # @param options [Hash]
  # @raise [TypeError] raised if the klass does not inherit from Table::Border
  # @raise [NoImplemntationError] raise if the klass does not implement def_border
  #
  # source://tty-table//lib/tty/table/renderer.rb#96
  def render_with(border_class, table, options = T.unsafe(nil), &block); end

  # Select renderer class based on string name.
  #
  # The possible values for type are
  #   [:basic, :ascii, :unicode]
  #
  # @api private
  # @param type [Symbol] the renderer type used for displaying table
  # @return [TTY::Table::Renderer]
  #
  # source://tty-table//lib/tty/table/renderer.rb#33
  def select(type); end

  class << self
    # Raises an error if provided border class is of wrong type or has invalid
    # implementation
    #
    # @api public
    # @raise [TypeError] raised when providing wrong class for border
    # @raise [NoImplementationError] raised when border class does not implement core methods
    #
    # source://tty-table//lib/tty/table/renderer.rb#48
    def assert_border_class(border_class); end

    # Render a given table and return the string representation.
    #
    # @api public
    # @option options
    # @param table [TTY::Table] the table to be rendered
    # @param options [Hash] the options to render the table with
    # @return [String]
    # @yield [renderer]
    #
    # source://tty-table//lib/tty/table/renderer.rb#74
    def render(table, options = T.unsafe(nil), &block); end

    # Add custom border for the renderer
    #
    # @api public
    # @param border_class [TTY::Table::Border]
    # @param table [TTY::Table]
    # @param options [Hash]
    # @raise [TypeError] raised if the klass does not inherit from Table::Border
    # @raise [NoImplemntationError] raise if the klass does not implement def_border
    #
    # source://tty-table//lib/tty/table/renderer.rb#96
    def render_with(border_class, table, options = T.unsafe(nil), &block); end

    # Select renderer class based on string name.
    #
    # The possible values for type are
    #   [:basic, :ascii, :unicode]
    #
    # @api private
    # @param type [Symbol] the renderer type used for displaying table
    # @return [TTY::Table::Renderer]
    #
    # source://tty-table//lib/tty/table/renderer.rb#33
    def select(type); end
  end
end

# source://tty-table//lib/tty/table/renderer/ascii.rb#9
class TTY::Table::Renderer::ASCII < ::TTY::Table::Renderer::Basic
  # Create ASCII renderer
  #
  # @api private
  # @return [ASCII] a new instance of ASCII
  #
  # source://tty-table//lib/tty/table/renderer/ascii.rb#13
  def initialize(table, options = T.unsafe(nil)); end
end

# Renders table without any border styles.
#
# @api private
#
# source://tty-table//lib/tty/table/renderer/basic.rb#28
class TTY::Table::Renderer::Basic
  include ::TTY::Table::Validatable

  # Initialize a Renderer
  #
  # @api private
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash]
  # @return [TTY::Table::Renderer::Basic]
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#112
  def initialize(table, options = T.unsafe(nil)); end

  # The table column alignments
  #
  # @api private
  # @return [Array]
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#50
  def alignments; end

  # The table column alignments
  #
  # @api private
  # @return [Array]
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#50
  def alignments=(_arg0); end

  # Store border characters, style and separator for the table rendering
  #
  # @api public
  # @param options [Hash, Table::BorderOptions]
  # @yield [Table::BorderOptions] block representing border options
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#148
  def border(border_opts = T.unsafe(nil), &block); end

  # Store border characters, style and separator for the table rendering
  #
  # @api public
  # @param options [Hash, Table::BorderOptions]
  # @yield [Table::BorderOptions] block representing border options
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#148
  def border=(border_opts = T.unsafe(nil), &block); end

  # Table border to be rendered
  #
  # @api private
  # @return [TTY::Table::Border]
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#36
  def border_class; end

  # Table border to be rendered
  #
  # @api private
  # @return [TTY::Table::Border]
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#36
  def border_class=(_arg0); end

  # Parses supplied column widths, if not present
  # calculates natural widths.
  #
  # @api public
  # @return [Array[Integer]]
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#136
  def column_widths; end

  # The table enforced column widths
  #
  # @api public
  # @return [Array]
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#43
  def column_widths=(_arg0); end

  # Initialize operations
  #
  # @api private
  # @return [Array[String, Operation]]
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#223
  def create_operations(widths); end

  # A callable object used for formatting field content
  #
  # @api public
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#55
  def filter; end

  # A callable object used for formatting field content
  #
  # @api public
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#55
  def filter=(_arg0); end

  # The table indentation value
  #
  # @api public
  # @return [Integer]
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#70
  def indent; end

  # Change the value of indentation
  #
  # @api public
  # @param the [Integer] indentation value
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#162
  def indent=(value); end

  # The table column span behaviour. When true the column's line breaks
  # cause the column to span multiple rows. By default set to false.
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#63
  def multiline; end

  # The table column span behaviour. When true the column's line breaks
  # cause the column to span multiple rows. By default set to false.
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#63
  def multiline=(_arg0); end

  # The table padding settings
  #
  # @api public
  # @return [TTY::Table::Padder]
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#93
  def padding; end

  # Sets the output padding,
  #
  # @api public
  # @param value [Integer] the amount of padding, not allowed to be zero
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#172
  def padding=(value); end

  # Renders table as string with border
  #
  # @api public
  # @example
  #   renderer = TTY::Table::Renderer::Basic.new(table)
  #   renderer.render
  # @return [String] the string representation of table
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#186
  def render; end

  # The table resizing behaviour. If true the algorithm will
  # automatically expand or shrink table to fit the terminal
  # width or specified width. By default its false.
  #
  # @api public
  # @return [Integer]
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#86
  def resize; end

  # The table resizing behaviour. If true the algorithm will
  # automatically expand or shrink table to fit the terminal
  # width or specified width. By default its false.
  #
  # @api public
  # @return [Integer]
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#86
  def resize=(_arg0); end

  # Select applicable operations for this table
  #
  # @api private
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#209
  def select_operations; end

  # The table total width
  #
  # @api public
  # @return [Integer]
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#77
  def width; end

  # The table total width
  #
  # @api public
  # @return [Integer]
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#77
  def width=(_arg0); end

  protected

  # Render table data
  #
  # @api private
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#245
  def render_data; end

  # Format the header if present
  #
  # @api private
  # @param row [TTY::Table::Row, TTY::Table::Header] the first row in the table
  # @param data_border [TTY::Table::Border] the border for this table
  # @return [String]
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#268
  def render_header(row, data_border); end

  # Format a single row with border
  #
  # @api private
  # @param row [Array] a row to decorate
  # @param data_border [TTY::Table::Border] the border for this table
  # @param is_not_last_row [Boolean]
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#306
  def render_row(row, index, data_border, is_not_last_row); end

  # Format the rows
  #
  # @api private
  # @param data_border [TTY::Table::Border] the border for this table
  # @return [Arrays[String]]
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#286
  def render_rows(data_border); end

  # Table to be rendered
  #
  # @api public
  # @return [TTY::Table]
  #
  # source://tty-table//lib/tty/table/renderer/basic.rb#240
  def table; end
end

# @api private
#
# source://tty-table//lib/tty/table/renderer.rb#16
TTY::Table::Renderer::RENDERER_MAPPER = T.let(T.unsafe(nil), Hash)

# Unicode representation of table renderer
#
# @api private
#
# source://tty-table//lib/tty/table/renderer/unicode.rb#11
class TTY::Table::Renderer::Unicode < ::TTY::Table::Renderer::Basic
  # Create Unicode renderer
  #
  # @api private
  # @param table [Table]
  # @return [Unicode] a new instance of Unicode
  #
  # source://tty-table//lib/tty/table/renderer/unicode.rb#17
  def initialize(table, options = T.unsafe(nil)); end
end

# Raised when the table cannot be resized
#
# source://tty-table//lib/tty/table/error.rb#22
class TTY::Table::ResizeError < ::ArgumentError; end

# A class that represents a row in a table.
#
# Used internally by {Table} to store row represenation by converting
# {Array} into {Row} instance.
#
# @api private
#
# source://tty-table//lib/tty/table/row.rb#25
class TTY::Table::Row
  include ::Enumerable
  extend ::Forwardable

  # Initialize a Row
  #
  # @api public
  # @example
  #   row = new TTY::Table::Row.new [1,2,3]
  #   row[1]  # => 2
  #
  #   row = new TTY::Table::Row.new [1,2,3], %w[a b c]
  #   row[0]   # => 1
  #   row["a"] # => 1
  #
  #   row = new TTY::Table::Row.new {"a": 1, "b": 2, "c": 3}
  #   row[0]   # => 1
  #   row["a"] # => 1
  # @param data [#to_ary] the row data
  # @return [undefined]
  #
  # source://tty-table//lib/tty/table/row.rb#70
  def initialize(data, header = T.unsafe(nil)); end

  # Check if this row is equivalent to another row
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-table//lib/tty/table/row.rb#223
  def ==(other); end

  # Lookup a value in the row given an attribute allowing for Array or
  # Hash like indexing
  #
  # @api public
  # @example
  #   row[1]
  #   row[:id]
  #   row.call(:id)
  #
  # source://tty-table//lib/tty/table/row.rb#110
  def [](attribute); end

  # Set value at index
  #
  # @api public
  # @example
  #   row[attribute] = value
  #
  # source://tty-table//lib/tty/table/row.rb#134
  def []=(attribute, value); end

  # The row attributes that describe each element
  #
  # @api private
  # @return [Array]
  #
  # source://tty-table//lib/tty/table/row.rb#34
  def attributes; end

  # Lookup attribute without evaluation
  #
  # @api public
  #
  # source://tty-table//lib/tty/table/row.rb#124
  def call(attribute); end

  # Coerces values to field instances
  #
  # @api public
  # @param values [Array[Object]]
  # @return [Array[TTY::Table::Field]]
  #
  # source://tty-table//lib/tty/table/row.rb#90
  def coerce_to_fields(values); end

  # The row data
  #
  # @api private
  # @return [Hash]
  #
  # source://tty-table//lib/tty/table/row.rb#41
  def data; end

  # Iterate over each element in the Row
  #
  # @api public
  # @example
  #   vec = Row.new [1,2,3], ["a","b","c"]
  #   vec.each { |element| ... }
  # @return [self]
  #
  # source://tty-table//lib/tty/table/row.rb#153
  def each; end

  # Check if there are no elements
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-table//lib/tty/table/row.rb#174
  def empty?; end

  # Check if this row is equivalent to another row
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-table//lib/tty/table/row.rb#223
  def eql?(other); end

  # The row fields
  #
  # @api public
  #
  # source://tty-table//lib/tty/table/row.rb#46
  def fields; end

  # Provide a unique hash value. If a row contains the same data as another
  # row, they will hash to the same value.
  #
  # @api public
  #
  # source://tty-table//lib/tty/table/row.rb#232
  def hash; end

  # Find maximum row height
  #
  # @api public
  # @return [Integer]
  #
  # source://tty-table//lib/tty/table/row.rb#183
  def height; end

  # String representation of a row with its fields
  #
  # @api public
  #
  # source://tty-table//lib/tty/table/row.rb#248
  def inspect; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def join(*args, **_arg1, &block); end

  # Number of data items in a row
  #
  # @api public
  # @return [Integer]
  #
  # source://tty-table//lib/tty/table/row.rb#164
  def length; end

  # Map field values
  #
  # @api public
  #
  # source://tty-table//lib/tty/table/row.rb#239
  def map!(&block); end

  # Number of data items in a row
  #
  # @api public
  # @return [Integer]
  #
  # source://tty-table//lib/tty/table/row.rb#164
  def size; end

  # Return the Row elements in an array.
  #
  # @api public
  # @return [Array]
  #
  # source://tty-table//lib/tty/table/row.rb#204
  def to_a; end

  # Convert the Row into Array
  #
  # @api public
  # @example
  #   array = row.to_ary
  # @return [Array]
  #
  # source://tty-table//lib/tty/table/row.rb#195
  def to_ary; end

  # Instantiates a new field
  #
  # @api public
  #
  # source://tty-table//lib/tty/table/row.rb#97
  def to_field(options = T.unsafe(nil)); end

  # Convert the Row into hash
  #
  # @api public
  # @return [Hash]
  #
  # source://tty-table//lib/tty/table/row.rb#213
  def to_hash; end
end

# A class for transforming table values
#
# Used internally by {Table}
#
# @api private
#
# source://tty-table//lib/tty/table/transformation.rb#10
class TTY::Table::Transformation
  class << self
    # Extract the header and row tuples from the value
    #
    # @api public
    # @param args [Array]
    # @return [Object]
    #
    # source://tty-table//lib/tty/table/transformation.rb#18
    def extract_tuples(args); end

    # Group hash keys into header and values into rows
    #
    # @api public
    # @param value [Hash]
    #
    # source://tty-table//lib/tty/table/transformation.rb#32
    def group_header_and_rows(value); end
  end
end

# Raised when reading non-existent element from a table
#
# source://tty-table//lib/tty/table/error.rb#9
class TTY::Table::TupleMissing < ::IndexError
  # @return [TupleMissing] a new instance of TupleMissing
  #
  # source://tty-table//lib/tty/table/error.rb#12
  def initialize(i, j); end

  # Returns the value of attribute i.
  #
  # source://tty-table//lib/tty/table/error.rb#10
  def i; end

  # Returns the value of attribute j.
  #
  # source://tty-table//lib/tty/table/error.rb#10
  def j; end
end

# Raised when the argument type is different from expected
#
# source://tty-table//lib/tty/table/error.rb#28
class TTY::Table::TypeError < ::ArgumentError; end

# Raised when the attribute is unknown
#
# source://tty-table//lib/tty/table/error.rb#37
class TTY::Table::UnknownAttributeError < ::IndexError; end

# source://tty-table//lib/tty/table/version.rb#5
TTY::Table::VERSION = T.let(T.unsafe(nil), String)

# Mixin to provide validation for {Table}.
#
# Include this mixin to add validation for options.
#
# @api private
#
# source://tty-table//lib/tty/table/validatable.rb#12
module TTY::Table::Validatable
  # Check if table row is the correct size
  #
  # @api private
  # @raise [DimensionMismatchError] if the row is not the correct length
  # @return [nil]
  #
  # source://tty-table//lib/tty/table/validatable.rb#38
  def assert_row_size(row, rows); end

  # Check if table rows are the equal size
  #
  # @api private
  # @raise [DimensionMismatchError] if the rows are not equal length
  # @return [nil]
  #
  # source://tty-table//lib/tty/table/validatable.rb#21
  def assert_row_sizes(rows); end

  # Check if table type is provided
  #
  # @api private
  # @raise [ArgumentRequired]
  # @return [Table]
  #
  # source://tty-table//lib/tty/table/validatable.rb#53
  def assert_table_type(value); end

  # Check if options are of required type
  #
  # @api private
  #
  # source://tty-table//lib/tty/table/validatable.rb#68
  def validate_options!(options); end
end
